%% File : buck_control.tlc
%% Created : Mon Jun 12 21:50:07 2023
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "buck_control.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  buck_control "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
    %assign realType = LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)

  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    %assign hFileName = "buck_control_accel_wrapper"
    %assign hFileNameMacro = FEVAL("upper", hFileName)
    %openfile hFile = "%<hFileName>.h"
    %selectfile hFile
    #ifndef _%<hFileNameMacro>_H_
    #define _%<hFileNameMacro>_H_

    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif
    #ifdef __cplusplus
    #define SFB_EXTERN_C extern "C"
    #else
    #define SFB_EXTERN_C extern
    #endif
    SFB_EXTERN_C void buck_control_Start_wrapper_accel(void);
    SFB_EXTERN_C void buck_control_Outputs_wrapper_accel(const %<realType> *target,
			const %<realType> *Uc_in,
			const %<realType> *IL_in,
			const %<realType> *time,
			%<realType> *display,
			%<realType> *pwmref);
    #undef SFB_EXTERN_C
    #endif
    %closefile hFile

    %assign cFileName = "buck_control_accel_wrapper"
    %openfile cFile = "%<cFileName>.c"
    %selectfile cFile
    #include <string.h>
    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif
    #include "%<hFileName>.h"
    

    extern void buck_control_Start_wrapper(void);
    extern void buck_control_Outputs_wrapper(const %<realType> *target,
			const %<realType> *Uc_in,
			const %<realType> *IL_in,
			const %<realType> *time,
			%<realType> *display,
			%<realType> *pwmref);
    extern void buck_control_Terminate_wrapper(void);
    void buck_control_Start_wrapper_accel(void){
    buck_control_Start_wrapper();
    }
    void buck_control_Outputs_wrapper_accel(const %<realType> *target,
			const %<realType> *Uc_in,
			const %<realType> *IL_in,
			const %<realType> *time,
			%<realType> *display,
			%<realType> *pwmref){
    buck_control_Outputs_wrapper(target,
			Uc_in,
			IL_in,
			time,
			display,
			pwmref);
    }

    %closefile cFile

    %<LibAddToCommonIncludes("%<hFileName>.h")>

  %else
  %openfile externs

    #ifdef __cplusplus
    #define SFB_EXTERN_C extern "C"
    #else
    #define SFB_EXTERN_C extern
    #endif

    SFB_EXTERN_C void buck_control_Start_wrapper(void);

    SFB_EXTERN_C void buck_control_Outputs_wrapper(const %<realType> *target,
			const %<realType> *Uc_in,
			const %<realType> *IL_in,
			const %<realType> *time,
			%<realType> *display,
			%<realType> *pwmref);

    SFB_EXTERN_C void buck_control_Terminate_wrapper(void);

    #undef SFB_EXTERN_C
  %closefile externs
  %<LibCacheExtern(externs)>

  %endif
  %%
%endfunction


%% Function: Start ============================================================
%%
%function Start(block, system) Output
   /* %<Type> Block: %<Name> */
  
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    buck_control_Start_wrapper_accel();
  %else
    buck_control_Start_wrapper();
  %endif

%endfunction
%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0)
  %assign pu2 = LibBlockInputSignalAddr(2, "", "", 0)
  %assign pu3 = LibBlockInputSignalAddr(3, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    buck_control_Outputs_wrapper_accel(%<pu0>, %<pu1>, %<pu2>, %<pu3>, %<py0>, %<py1>);
  %else
    buck_control_Outputs_wrapper(%<pu0>, %<pu1>, %<pu2>, %<pu3>, %<py0>, %<py1>);
  %endif

  %%
%endfunction


%% [EOF] buck_control.tlc

